=Testing Protocol=

_status_: *Draft*

We are in the process of designing a test suite which will allow clients to test their implementation of our this protocol.  Clients will make a request to the test server in the same way they would make a normal update request. After downloading and parsing the response, they will make a new request("/safebrowsing/verify_urls") which will give a list of urls and a bit specifying if they url should or shouldn't be in the current list. After verifying that their data is correct (including making hashserver requests for the necessary matching prefixes), the client will make another download request and repeat until no more data can be downloaded. Once the client believes the test is complete, it should make a request to "/test_complete" to verify that the server agrees. The response should be either "yes" or "no". Unlike other requests, the test complete request will not take any CGI parameters. Pseudo code for such a test is shown below.

{{{
int step = 1;
GetKey(step);
DownloadLists(step);

ServerResponse response;
while (RequestReceivesData(MakeTestRequest(step, &response))) {
  FetchAndApplyRedirects(response, step);
  if (!VerifyCurrentData(step)) {
    FailTest();
  }
  step++;
}

if (!VerifyTestComplete()) {
  FailTest();
}
PassTest();
}}}

Implementing such a routine will likely require the following changes to client code.
   * Request will have to have a "step" cgi parameter appended to them.  This includes downloads requests, gethash requests, and the new verification requests.  They will probably need to be given for the redirects from the downloads requests as well, but this hasn't been determined yet.
   * Clients will need to change the host and possibly the path of the urls they are requesting for these tests.
   * Clients will need to parse a new request type (verification).  The form of the response can be seen below.

{{{
RESPONSE         = [URL_VERIFICATION LF]+
URL_VERIFICATION = URL TAB LISTNAME TAB ("yes" | "no") 
LISTNAME         = (LOALPHA | DIGIT)+ "-" LOALPHA+ "-" (LOALPHA | DIGIT)+
}}}

===Known Issues===
   * For technical reasons, it seems likely that they lists that clients will use to test will be the same as the ones used in production (i.e. goog-phish-shavar, goog-malware-shavar, etc.).  It would be better if this test used separate list names to decrease the chance that running the test would affect normal function of the protocol. In the meantime clients need to make sure that the state from the test doesn't interfere with whatever state the client may have had beforehand.